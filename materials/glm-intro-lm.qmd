---
title: "Linear models"
---
```{r}
#| echo: false
#| message: false
#| results: hide
source(file = "setup_files/setup.R")
```

```{python}
#| echo: false
#| message: false
import shutup;shutup.please()
exec(open('setup_files/setup.py').read())
```

## Data

For this example, we'll be using the several data sets about Darwin's finches. They are part of a long-term genetic and phenotypic study on the evolution of several species of finches. The exact details are less important for now, but there are data on multiple species where several phenotypic characteristics were measured (see @fig-finchphenotypes).

![Finches phenotypes (courtesy of [HHMI BioInteractive](https://www.biointeractive.org))](images/finches-phenotypes.png){width=75% #fig-finchphenotypes}

```{r}
#| echo: false
#| message: false
finches <- read_csv("data/finches_beaks.csv")
```

## Exploring data

It's always a good idea to explore your data visually. Here we are focussing on the (potential) relationship between beak length (`blength`) and beak depth (`bdepth`).

Our data contains measurements from two years (`year`) and two species (`species`). If we plot beak depth against beak length, colour our data by species and look across the two time points (1975 and 2012), we get the following graph:

```{r}
#| echo: false
#| message: false
#| label: fig-finches_1975v2012
#| fig-cap: "Beak depth and length for _G. fortis_ and _G. scandens_"
ggplot(data = finches,
       mapping = aes(x = blength,
                     y = bdepth,
                     colour = species)) +
  geom_point() +
  facet_wrap(facets = vars(year)) +
  labs(x = "beak length (mm)",
       y = "beak depth (mm)")
```

It seems that there is a potential linear relationship between beak depth and beak length. There are some differences between the two species and two time points with, what seems, more spread in the data in 2012. The data for both species also seem to be less separated than in 1975.

For the current purpose, we'll focus on one group of data: those of _Geospiza fortis_ in 1975.

```{r}
#| echo: false
fortis_1975 <- finches %>% 
  filter(species == "fortis",
         year == 1975)
```

## Linear model

Let's look at the _G. fortis_ data more closely, assuming that the have a linear relationship. We can visualise that as follows:

```{r}
#| echo: false
#| message: false
#| label: fig-lm_fortis_1975
#| fig-cap: "Beak depth vs beak length _G. fortis_ (1975)"
ggplot(data = fortis_1975,
       mapping = aes(x = blength,
                     y = bdepth)) +
  geom_point() +
  geom_smooth(method = "lm") +
  labs(x = "beak length (mm)",
       y = "beak depth (mm)")
```

If you recall from the [Core statistics linear regression](https://cambiotraining.github.io/corestats/materials/cs3_practical_linear-regression.html) session, what we're doing here is assuming that there is a linear relationship between the response variable (in this case `bdepth`) and predictor variable (here, `blength`).

We can get more information on this linear relationship by defining a linear model, which has the form of:

$$
Y = \beta_0 + \beta_1X
$$

where $Y$ is the response variable (the thing we're interested in), $X$ the predictor variable and $\beta_0$ and $\beta_1$ are model coefficients. 
More explicitly for our data, we get:

$$
beak\ depth = \beta_0 + \beta_1 \times beak\ length
$$

```{r}
#| echo: false
lm_fortis_1975 <- lm(bdepth ~ blength,
                     data = fortis_1975)
```

But how do we find this model? The computer uses a method called **least-squares regression**. There are several steps involved in this.

### Line of best fit

The computer tries to find the **line of best fit**. This is a linear line that best describes your data. We could draw a linear line through our cloud of data points in many ways, but the least-squares method converges to a single solution, where the **sum of squared residual deviations** is at its smallest.

To understand this a bit better, it's helpful to realise that each data point consists of a fitted value (the beak depth predicted by the model at a given beak length), combined with the error. The error is the difference between the fitted value and the data point.

Let's look at this for one of the observations, for example finch 473:

```{r}
#| echo: false
#| message: false
#| warning: false
#| label: fig-finch473
#| fig-cap: "Beak depth vs beak length (finch 473, 1975)"
fortis_1975_example <- fortis_1975 %>% 
  mutate(min_depth = min(bdepth),
         max_depth = max(bdepth),
         min_length = min(blength),
         max_length = max(blength)) 

fortis_1975_example <- lm_fortis_1975 %>% 
  augment() %>% 
  full_join(fortis_1975_example)

finch473 <- fortis_1975_example %>%
  filter(band == 473)

fortis_1975_example %>%
  ggplot(aes(blength, bdepth)) +
  geom_point(colour = "#999999") +
  theme_bw() +
  labs(x = "beak length (mm)",
       y = "beak depth (mm)") +
  geom_point(data = . %>% filter(band == 473),
             mapping = aes(blength, bdepth),
             colour = "#D55E00",
             size = 3) +
  annotate(geom = "text", x = 9, y = 9.6, hjust = 0,
           label = "observed beak depth") +
  geom_segment(data = . %>% filter(band == 473),
               aes(x = blength, xend = blength,
                   y = min_depth, yend = bdepth),
               linetype = "dashed",
               linewidth = 1,
               colour = "#D55E00") +
  annotate(geom = "text", x = 10.55, y = 8, hjust = 0,
           label = "observed beak length") +
  geom_segment(data = . %>% filter(band == 473),
               aes(x = min_length, xend = blength,
                   y = bdepth, yend = bdepth),
               linetype = "dashed",
               linewidth = 1,
               colour = "#D55E00") +
  geom_smooth(method = "lm", se = FALSE) +
  geom_point(data = finch473, aes(x = blength,
                                  y = .fitted),
             colour = "blue", size = 3) +
  geom_segment(data = finch473,
               aes(x = blength, xend = (blength + 0.5),
                   y = .fitted, yend = .fitted),
               arrow = arrow(ends = "first", length = unit(2, "mm"))) +
  annotate(geom = "text", x = 11.05, y = finch473$.fitted, hjust = 0,
           label = "fitted value") +
  geom_segment(data = finch473,
               aes(x = blength, xend =  blength,
                   y = bdepth, yend = .fitted),
               arrow = arrow(ends = "both", length = unit(2, "mm"))) +
  annotate(geom = "text", x = 10.45, y = 9.3, label = "\u03b5")
```

Obtaining the fitted value and error happens for each data point. All these residuals are then squared (to ensure that they are positive), and added together. This is the so-called sum-of-squares.

You can imagine that if you draw a line through the data that doesn't fit the data all that well, the error associated with each data point increases. The sum-of-squares then also increases. Equally, the closer the data are to the line, the smaller the error. This results in a smaller sum-of-squares.

The linear line where the sum-of-squares is at its smallest, is called the **line of best fit**. This line acts as a model for our data.

For finch 473 we have the following values:

* the observed beak depth is `r finch473 %>% pull(bdepth)` mm
* the observed beak length is `r finch473 %>% pull(blength)` mm
* the fitted value is `r fortis_1975_example %>% filter(band == 473) %>% pull(.fitted) %>% round(digits = 2)` mm
* the error is `r fortis_1975_example %>% filter(band == 473) %>% pull(.resid) %>% round(digits = 2)` mm

### Linear regression

Once we have the line of best fit, we can perform a **linear regression**. What we're doing with the regression, is asking:

> Is the line of best fit a better predictor of our data than a horizontal line across the average value?

Visually, that looks like this:

```{r}
#| echo: false
#| message: false
#| label: fig-lm_regression
#| fig-cap: "Regression: is the slope different from zero?"
fortis_1975_example %>%
  ggplot(aes(blength, bdepth)) +
  geom_point(colour = "#999999") +
  theme_bw() +
  labs(title = "Finch beak observations (1975)",
       x = "beak length (mm)",
       y = "beak depth (mm)") +
  geom_smooth(method = "lm", se = FALSE) +
  geom_hline(yintercept = fortis_1975_example %>%
               summarise(mean_bd = mean(bdepth)) %>%
               pull(),
             linetype = "dashed", 
             linewidth = 1,
             colour = "#D55E00") +
  annotate(geom = "text", x = 8.5, y = 9.3, hjust = 0,
           label = "average beak depth")
```

What we're actually testing is whether the _slope_ ($\beta_1$) of the line of best fit is any different from zero.

To find the answer, we perform an ANOVA. This gives us a p-value of `r anova(lm_fortis_1975) %>% tidy() %>% filter(term == "blength") %>% pull(p.value) %>% formatC(x = ., format = "e", digits = 2)`.

Needless to say, this p-value is extremely small, and definitely smaller than any common significance threshold, such as $p < 0.05$. This suggests that beak length is a statistically significant predictor of beak depth.

In this case the model has an **intercept** ($\beta_0$) of `r round(lm_fortis_1975$coefficients[1], 2)` and a **slope** ($\beta_1$) of `r round(lm_fortis_1975$coefficients[2], 2)`. We can use this to write a simple linear equation, describing our data. Remember that this takes the form of:

$$
Y = \beta_0 + \beta_1X
$$

which in our case is

$$
beak\ depth = \beta_0 + \beta_1 \times beak\ length
$$

and gives us

$$
beak\ depth = -0.34 + 0.90 \times beak\ length
$$

### Assumptions

In example above we just got on with things once we suspected that there was a linear relationship between beak depth and beak length. However, for the linear regression to be valid, several assumptions need to be met. If any of those assumptions are violated, we can't trust the results. The following four assumptions need to be met, with a 5th point being a case of good scientific practice:

1. Data should be linear
2. Residuals are normally distributed
3. Equality of variance
4. The residuals are independent
5. (no influential points)

As we did many times during the [Core statistics](https://cambiotraining.github.io/corestats/) sessions, we mainly rely on diagnostic plots to check these assumptions. For this particular model they look as follows:

```{r}
#| echo: false
#| message: false
#| label: fig-fortis1975_lm_dgplots
#| fig-cap: "Diagnostic plots for _G. fortis_ (1975) model"
lm_fortis_1975 %>% 
  resid_panel(plots = c("resid", "qq", "ls", "cookd"),
              smoother = TRUE)
```

These plots look very good to me. For a recap on how to interpret these plots, see [CS2: ANOVA](https://cambiotraining.github.io/corestats/materials/cs2_practical_anova.html).

Taken together, we can see the relationship between beak depth and beak length as a linear one, described by a (linear) model that has a predicted value for each data point, and an associated error.
